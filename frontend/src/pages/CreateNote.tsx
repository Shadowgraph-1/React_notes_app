import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './CreateNote.module.css';

// üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è 2025
interface NoteData {
  id?: string;
  title: string;
  content: string;
  color: string;
  tags: string[];
  priority: '–ù–∏–∑–∫–∏–π' | '–°—Ä–µ–¥–Ω–∏–π' | '–í—ã—Å–æ–∫–∏–π' | '–°—Ä–æ—á–Ω—ã–π';
  dueDate?: string;
  attachments: FileAttachment[];
  collaborators: string[];
  aiSummary?: string;
  voiceNotes: VoiceNote[];
  location?: GeoLocation;
  encrypted: boolean;
  version: number;
  lastModified: string;
  wordCount: number;
  readingTime: number;
  mood?: 'positive' | 'neutral' | 'negative';
  category: string;
}

interface FileAttachment {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
  thumbnail?: string;
}

interface VoiceNote {
  id: string;
  url: string;
  duration: number;
  transcript?: string;
  waveform: number[];
}

interface GeoLocation {
  lat: number;
  lng: number;
  address: string;
}

interface ChatMessage {
  id: string;
  user: string;
  message: string;
  timestamp: string;
  type: 'text' | 'voice' | 'image' | 'file' | 'ai_response';
  reactions: MessageReactions;
  isAI?: boolean;
  language?: string;
  sentiment?: 'positive' | 'neutral' | 'negative';
  mentions?: string[];
  replyTo?: string;
  edited?: boolean;
  readBy: string[];
}

interface MessageReactions {
  thumbsup: number;
  heart: number;
  laugh: number;
  fire: number;
  mind_blown: number;
  party: number;
}

interface DashboardData {
  activityData: number[];
  newNotesToday: number;
  avgNoteTime: number;
  totalUsers: number;
  popularNote: string;
  syncStatus: 'working' | 'error' | 'syncing' | 'offline';
  serverLoad: number;
  notifications: number;
  aiInsights: AIInsight[];
  productivityScore: number;
  streakDays: number;
  trendingTags: TrendingTag[];
  realtimeCollaborators: number;
  storageUsed: { used: number; total: number };
  securityStatus: 'secure' | 'warning' | 'critical';
  aiQuota: { used: number; total: number };
}

interface AIInsight {
  type: 'productivity' | 'pattern' | 'recommendation' | 'warning';
  title: string;
  description: string;
  confidence: number;
  actionable: boolean;
}

interface TrendingTag {
  name: string;
  trend: number;
  usage: number;
  aiRecommended?: boolean;
}

// üé® –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const NOTE_COLORS = [
  "#FFFFFF", "#FFEBEE", "#E8F5E9", "#E3F2FD", "#F3E5F5",
  "#FFF3E0", "#E0F2F1", "#F1F8E9", "#FCE4EC", "#E8EAF6",
  "#1A1A1A", "#2D1B69", "#1B5E20", "#0D47A1", "#4A148C"
];

const PRIORITY_COLORS = {
  –ù–∏–∑–∫–∏–π: '#4CAF50',
  –°—Ä–µ–¥–Ω–∏–π: '#FF9800',
  –í—ã—Å–æ–∫–∏–π: '#F44336',
  –°—Ä–æ—á–Ω—ã–π: '#D81B60'
};

const PRIORITY_OPTIONS = [
  { value: '–ù–∏–∑–∫–∏–π', label: '–ù–∏–∑–∫–∏–π' },
  { value: '–°—Ä–µ–¥–Ω–∏–π', label: '–°—Ä–µ–¥–Ω–∏–π' },
  { value: '–í—ã—Å–æ–∫–∏–π', label: '–í—ã—Å–æ–∫–∏–π' },
  { value: '–°—Ä–æ—á–Ω—ã–π', label: '–°—Ä–æ—á–Ω—ã–π' }
];

const CATEGORIES = [
  '–†–∞–±–æ—Ç–∞', '–õ–∏—á–Ω–æ–µ', '–ü—Ä–æ–µ–∫—Ç—ã', '–ò–¥–µ–∏', '–£—á–µ–±–∞',
  '–ó–¥–æ—Ä–æ–≤—å–µ', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–§–∏–Ω–∞–Ω—Å—ã', '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–î—Ä—É–≥–æ–µ'
];

const AVATAR_COLORS: { [key: string]: string } = {
  "–í—ã": "#8b5cf6",
  "AI Assistant": "#00ff88",
  "–ê–Ω–Ω–∞": "#ec4899",
  "–ü–µ—Ç—Ä": "#3b82f6",
  "–ú–∞—à–∞": "#facc15",
  "–ë–æ—Ç": "#10b981",
  "–ö–æ–ª–ª–µ–≥–∞": "#f97316",
  "–ê–ª–µ–∫—Å–µ–π": "#a78bfa",
  "–ï–ª–µ–Ω–∞": "#f472b6",
  "–î–º–∏—Ç—Ä–∏–π": "#60a5fa",
  "–ò—Ä–∏–Ω–∞": "#fbbf24",
  "–°–µ—Ä–≥–µ–π": "#34d399",
  "–ù–∞—Ç–∞–ª—å—è": "#e879f9",
  "–ê–Ω–¥—Ä–µ–π": "#818cf8",
  "–û–ª—å–≥–∞": "#fbcfe8"
};

const CHAT_USERS = [
  "–í—ã", "–ê–Ω–Ω–∞", "–ü–µ—Ç—Ä", "–ú–∞—à–∞", "–ê–ª–µ–∫—Å–µ–π", "–ï–ª–µ–Ω–∞", "–î–º–∏—Ç—Ä–∏–π", "–ò—Ä–∏–Ω–∞", "–°–µ—Ä–≥–µ–π", "–ù–∞—Ç–∞–ª—å—è", "–ê–Ω–¥—Ä–µ–π", "–û–ª—å–≥–∞"
];

const RANDOM_MESSAGES = [
  "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?",
  "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∫–æ–¥–∏–Ω–≥–∞.",
  "–ù–∞–¥–æ –±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—á–µ—Ç –¥–æ –ø—è—Ç–Ω–∏—Ü—ã.",
  "–ö—Ç–æ-–Ω–∏–±—É–¥—å –≤–∏–¥–µ–ª –º–æ–π –±–ª–æ–∫–Ω–æ—Ç?",
  "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–¥–µ—è, —Å—Ç–æ–∏—Ç –æ–±–¥—É–º–∞—Ç—å.",
  "–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–±–∫–∏ –∂—É—Ç–∫–∏–µ –±—ã–ª–∏.",
  "–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞.",
  "–ü—Ä–æ—Å—Ç–æ –º—ã—Å–ª—å...",
  "–ù–µ –∑–∞–±—ã—Ç—å –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ.",
  "–≠—Ç–æ –≥–µ–Ω–∏–∞–ª—å–Ω–æ!",
  "–£ –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–µ–∫—Ç—É X.",
  "–ö—Ç–æ –∑–∞ –∫–æ—Ñ–µ?",
  "–í—Å–µ–º —Ö–æ—Ä–æ—à–µ–≥–æ –≤–µ—á–µ—Ä–∞!",
  "–†–∞–±–æ—Ç–∞ –∫–∏–ø–∏—Ç!",
  "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∑–∞–¥–∞—á–µ–π."
];

const AI_RESPONSES = [
  "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... –ì–æ—Ç–æ–≤–æ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
  "–ò–¥–µ—è –æ—Ç–ª–∏—á–Ω–∞—è! –•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ç–µ–≥–∏?",
  "–ü–æ–Ω—è–ª, —Å–µ–π—á–∞—Å –ø–æ–¥—É–º–∞—é –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º.",
  "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
  "–û–≥–æ, —ç—Ç–æ —Å—Ç–æ–∏—Ç –∑–∞–ø–∏—Å–∞—Ç—å! üòÑ"
];

// ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
class AIAssistant {
  static async generateSummary(content: string): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 1000));
    const words = content.split(' ').length;
    if (words < 10) return "–ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞";
    if (words < 50) return `–ó–∞–º–µ—Ç–∫–∞ –∏–∑ ${words} —Å–ª–æ–≤ –æ ${content.split(' ')[0].toLowerCase()}`;
    return `–ü–æ–¥—Ä–æ–±–Ω–∞—è –∑–∞–º–µ—Ç–∫–∞ (${words} —Å–ª–æ–≤) –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∏–¥–µ–∏`;
  }

  static async suggestTags(title: string, content: string): Promise<string[]> {
    await new Promise(resolve => setTimeout(resolve, 800));
    const text = (title + ' ' + content).toLowerCase();
    const suggestions: string[] = [];

    if (text.includes('—Ä–∞–±–æ—Ç') || text.includes('–ø—Ä–æ–µ–∫—Ç')) suggestions.push('–†–∞–±–æ—Ç–∞');
    if (text.includes('–∏–¥–µ—è') || text.includes('–ø–ª–∞–Ω')) suggestions.push('–ò–¥–µ–∏');
    if (text.includes('–≤—Å—Ç—Ä–µ—á–∞') || text.includes('–∑–≤–æ–Ω–æ–∫')) suggestions.push('–í—Å—Ç—Ä–µ—á–∏');
    if (text.includes('–∫–æ–¥') || text.includes('–ø—Ä–æ–≥—Ä–∞–º–º')) suggestions.push('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ');
    if (text.includes('–¥–∏–∑–∞–π–Ω') || text.includes('ui')) suggestions.push('–î–∏–∑–∞–π–Ω');

    return suggestions.slice(0, 3);
  }

  static analyzeMood(content: string): 'positive' | 'neutral' | 'negative' {
    const positiveWords = ['–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '—É—Å–ø–µ—Ö', '—Ä–∞–¥–æ—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ'];
    const negativeWords = ['–ø–ª–æ—Ö–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–≥—Ä—É—Å—Ç–Ω–æ', '—Å–ª–æ–∂–Ω–æ'];

    const text = content.toLowerCase();
    const positiveCount = positiveWords.filter(word => text.includes(word)).length;
    const negativeCount = negativeWords.filter(word => text.includes(word)).length;

    if (positiveCount > negativeCount) return 'positive';
    if (negativeCount > positiveCount) return 'negative';
    return 'neutral';
  }

  static calculateReadingTime(content: string): number {
    const wordsPerMinute = 200;
    const words = content.split(/\s+/).length;
    return Math.ceil(words / wordsPerMinute);
  }
}

// üéµ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏
class VoiceRecorder {
  private mediaRecorder: MediaRecorder | null = null;
  private audioChunks: Blob[] = [];

  async startRecording(): Promise<void> {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      this.mediaRecorder = new MediaRecorder(stream);
      this.audioChunks = [];

      this.mediaRecorder.ondataavailable = (event) => {
        this.audioChunks.push(event.data);
      };

      this.mediaRecorder.start();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }
  }

  async stopRecording(): Promise<VoiceNote> {
    return new Promise((resolve, reject) => {
      if (!this.mediaRecorder) {
        reject(new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞—á–∞—Ç–∞'));
        return;
      }

      this.mediaRecorder.onstop = () => {
        const audioBlob = new Blob(this.audioChunks, { type: 'audio/wav' });
        const url = URL.createObjectURL(audioBlob);

        resolve({
          id: Date.now().toString(),
          url,
          duration: 0,
          transcript: "–ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏",
          waveform: Array.from({ length: 50 }, () => Math.random() * 2 - 1)
        });
      };

      this.mediaRecorder.stop();
      this.mediaRecorder.stream.getTracks().forEach(track => track.stop());
    });
  }
}

// üîí –°–∏—Å—Ç–µ–º–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
class EncryptionService {
  static async encrypt(data: string, password: string): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 300));
    return btoa(data + '::encrypted::' + password);
  }

  static async decrypt(encryptedData: string, password: string): Promise<string> {
    await new Promise(resolve => setTimeout(resolve, 300));
    const decoded = atob(encryptedData);
    const parts = decoded.split('::encrypted::');
    if (parts.length === 2 && parts[1] === password) {
      return parts[0];
    }
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  }
}

// üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
const useGeolocation = () => {
  const [location, setLocation] = useState<GeoLocation | null>(null);
  const [loading, setLoading] = useState(false);

  const getCurrentLocation = useCallback(async () => {
    setLoading(true);
    try {
      const position = await new Promise<GeolocationPosition>((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject, { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 });
      });

      const mockAddresses = [
        "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª., 2",
        "–ù—å—é-–ô–æ—Ä–∫, –¢–∞–π–º—Å-—Å–∫–≤–µ—Ä",
        "–õ–æ–Ω–¥–æ–Ω, –ë–∏–≥-–ë–µ–Ω"
      ];
      const mockAddress = mockAddresses[Math.floor(Math.random() * mockAddresses.length)];

      setLocation({
        lat: position.coords.latitude,
        lng: position.coords.longitude,
        address: mockAddress
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø.');
    } finally {
      setLoading(false);
    }
  }, []);

  return { location, loading, getCurrentLocation };
};

// üìä SVG –∏–∫–æ–Ω–∫–∏
const AIIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <circle cx="12" cy="12" r="3"/>
    <path d="M12 1v6m0 6v6"/>
    <path d="m1 12 6 0m6 0 6 0"/>
    <path d="m2 2 4 4m8 8 4 4"/>
    <path d="m2 22 4-4m8-8 4-4"/>
  </svg>
);

const VoiceIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"/>
    <path d="M19 10v2a7 7 0 0 1-14 0v-2"/>
    <line x1="12" y1="19" x2="12" y2="23"/>
    <line x1="8" y1="23" x2="16" y2="23"/>
  </svg>
);

const LocationIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/>
    <circle cx="12" cy="10" r="3"/>
  </svg>
);

const SecurityIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>
    <path d="M9 12l2 2 4-4"/>
  </svg>
);

const CollaborationIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/>
    <circle cx="9" cy="7" r="4"/>
    <path d="M22 21v-2a4 4 0 0 0-3-3.87"/>
    <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
  </svg>
);

const AnalyticsIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M3 3v18h18"/>
    <path d="M18.7 8l-5.1 5.2-2.8-2.7L7 14.3"/>
  </svg>
);

const AttachmentIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
    <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"/>
  </svg>
);

const PlusIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <line x1="12" y1="5" x2="12" y2="19"/>
    <line x1="5" y1="12" x2="19" y2="12"/>
  </svg>
);

const NoteIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"/>
    <polyline points="13 2 13 9 20 9"/>
  </svg>
);

const SendIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="currentColor" width="20" height="20">
    <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
  </svg>
);

const HomeIcon: React.FC = () => (
  <svg viewBox="0 0 24 24" fill="currentColor">
    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
  </svg>
);

// üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–∞—à–±–æ—Ä–¥–∞
const EnhancedDashboardPanel: React.FC<{
  dashboardData: DashboardData;
}> = ({ dashboardData }) => {
  const [selectedInsight, setSelectedInsight] = useState<AIInsight | null>(null);

  const securityStatusColor = useMemo(() => {
    switch (dashboardData.securityStatus) {
      case 'secure': return 'var(--accent-green)';
      case 'warning': return 'var(--accent-yellow)';
      case 'critical': return '#ef4444';
      default: return 'var(--text-muted)';
    }
  }, [dashboardData.securityStatus]);

  return (
    <div className={`${styles.columnPanel} ${styles.dashboardPanel}`}>
      <div className={styles.panelHeader}>
        <AnalyticsIcon />
        <h2>–£–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
        <div style={{ marginLeft: 'auto', display: 'flex', gap: '8px' }}>
          <div className={styles.productivityScore}>
            –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {dashboardData.productivityScore}%
          </div>
        </div>
      </div>

      <div className={styles.dashboardContent}>
        {/* AI –ò–Ω—Å–∞–π—Ç—ã */}
        <div className={styles.dashboardSection}>
          <h3>ü§ñ AI –ò–Ω—Å–∞–π—Ç—ã</h3>
          <div className={styles.aiInsightsGrid}>
            {dashboardData.aiInsights.map((insight, index) => (
              <div
                key={index}
                className={`${styles.aiInsightWidget} ${insight.type === 'warning' ? styles.warning : ''}`}
                onClick={() => setSelectedInsight(insight)}
              >
                <div>
                  <AIIcon />
                  <span>{insight.title}</span>
                  <div className={styles.confidenceBadge}>
                    {Math.round(insight.confidence * 100)}%
                  </div>
                </div>
                <p>{insight.description}</p>
                {insight.actionable && (
                  <div className={styles.actionable}>
                    ‚ö° –î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className={styles.dashboardSection}>
          <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
          <div className={styles.enhancedStatsGrid}>
            <div className={styles.statWidget}>
              <div className={styles.statHeader}>
                <span>üî• –°–µ—Ä–∏—è –¥–Ω–µ–π</span>
              </div>
              <div className={styles.statValue}>{dashboardData.streakDays}</div>
              <div className={styles.statExtra}>–¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</div>
            </div>

            <div className={styles.statWidget}>
              <div className={styles.statHeader}>
                <CollaborationIcon />
                <span>–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è</span>
              </div>
              <div className={styles.statValue}>{dashboardData.realtimeCollaborators}</div>
              <div className={styles.statExtra}>–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–∞–≤—Ç–æ—Ä–æ–≤</div>
            </div>

            <div className={styles.statWidget}>
              <div className={styles.statHeader}>
                <SecurityIcon />
                <span>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</span>
              </div>
              <div className={styles.securityStatus} style={{ color: securityStatusColor }}>
                {dashboardData.securityStatus}
              </div>
            </div>

            <div className={styles.statWidget}>
              <div className={styles.statHeader}>
                <span>üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ</span>
              </div>
              <div className={styles.storageBar}>
                <div style={{ width: `${(dashboardData.storageUsed.used / dashboardData.storageUsed.total) * 100}%` }} />
              </div>
              <div className={styles.statExtra}>
                {(dashboardData.storageUsed.used / 1024).toFixed(1)}GB / {(dashboardData.storageUsed.total / 1024).toFixed(1)}GB
              </div>
            </div>

            <div className={styles.statWidget}>
              <div className={styles.statHeader}>
                <AIIcon />
                <span>AI –ö–≤–æ—Ç–∞</span>
              </div>
              <div className={styles.aiQuotaBar}>
                <div style={{ width: `${(dashboardData.aiQuota.used / dashboardData.aiQuota.total) * 100}%` }} />
              </div>
              <div className={styles.statExtra}>
                {dashboardData.aiQuota.used} / {dashboardData.aiQuota.total} –∑–∞–ø—Ä–æ—Å–æ–≤
              </div>
            </div>
          </div>
        </div>

        <div className={styles.dashboardSection}>
          <h3>üè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏</h3>
          <div className={styles.smartTagsGrid}>
            {dashboardData.trendingTags.map((tag, index) => (
              <div key={index} className={`${styles.enhancedTagWidget} ${tag.aiRecommended ? styles.aiRecommended : ''}`}>
                {tag.aiRecommended && (
                  <div className={styles.aiBadge}>
                    AI
                  </div>
                )}
                <div>
                  <div className={styles.tagName}>{tag.name}</div>
                  <div className={styles.tagUsage}>
                    {tag.usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                  </div>
                </div>
                <span className={`${styles.tagTrend} ${tag.trend > 0 ? styles.positive : styles.negative}`}>
                  {tag.trend > 0 ? '+' : ''}{tag.trend}%
                </span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {selectedInsight && (
        <div className={styles.aiInsightModalOverlay} onClick={() => setSelectedInsight(null)}>
          <div className={styles.aiInsightModalContent} onClick={e => e.stopPropagation()}>
            <h3>{selectedInsight.title}</h3>
            <p>{selectedInsight.description}</p>
            <div className={styles.aiInsightModalActions}>
              <button
                onClick={() => setSelectedInsight(null)}
                className={styles.closeButton}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
              {selectedInsight.actionable && (
                <button className={styles.applyButton}>
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// üöÄ –°—É–ø–µ—Ä-–ø—Ä–æ–∫–∞—á–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–º–µ—Ç–æ–∫
const SuperNoteEditor: React.FC<{
  onNoteSaved: () => void;
}> = ({ onNoteSaved }) => {
  const [noteData, setNoteData] = useState<NoteData>({
    title: '',
    content: '',
    color: NOTE_COLORS[0],
    tags: [],
    priority: '–°—Ä–µ–¥–Ω–∏–π',
    attachments: [],
    collaborators: [],
    voiceNotes: [],
    encrypted: false,
    version: 1,
    lastModified: new Date().toISOString(),
    wordCount: 0,
    readingTime: 0,
    category: '–õ–∏—á–Ω–æ–µ'
  });

  const [newTag, setNewTag] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const [aiLoading, setAiLoading] = useState(false);
  const [encryptionPassword, setEncryptionPassword] = useState('');
  const [suggestedTags, setSuggestedTags] = useState<string[]>([]);

  const voiceRecorder = useRef(new VoiceRecorder());
  const { location, loading: locationLoading, getCurrentLocation } = useGeolocation();

  const analyzeContent = useCallback(async () => {
    if (!noteData.content.trim()) return;

    setAiLoading(true);
    try {
      const [summary, tags, mood] = await Promise.all([
        AIAssistant.generateSummary(noteData.content),
        AIAssistant.suggestTags(noteData.title, noteData.content),
        Promise.resolve(AIAssistant.analyzeMood(noteData.content))
      ]);

      setNoteData(prev => ({
        ...prev,
        aiSummary: summary,
        mood,
        wordCount: prev.content.split(/\s+/).length,
        readingTime: AIAssistant.calculateReadingTime(prev.content)
      }));

      setSuggestedTags(tags);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
    } finally {
      setAiLoading(false);
    }
  }, [noteData.content, noteData.title]);

  useEffect(() => {
    const handler = setTimeout(() => {
      analyzeContent();
    }, 1000);
    return () => clearTimeout(handler);
  }, [noteData.title, noteData.content, analyzeContent]);

  const handleVoiceRecording = useCallback(async () => {
    try {
      if (!isRecording) {
        await voiceRecorder.current.startRecording();
        setIsRecording(true);
      } else {
        const voiceNote = await voiceRecorder.current.stopRecording();
        setNoteData(prev => ({
          ...prev,
          voiceNotes: [...prev.voiceNotes, voiceNote]
        }));
        setIsRecording(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É');
    }
  }, [isRecording]);

  const handlePlayVoiceNote = useCallback((url: string) => {
    const audio = new Audio(url);
    audio.play().catch(e => console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', e));
  }, []);

  const toggleEncryption = useCallback(async () => {
    if (!noteData.encrypted) {
      const password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:');
      if (!password) return;
      setEncryptionPassword(password);
      setNoteData(prev => ({ ...prev, encrypted: true }));
    } else {
      const confirmDecrypt = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:');
      if (confirmDecrypt === encryptionPassword) {
        try {
          const decryptedContent = await EncryptionService.decrypt(noteData.content, encryptionPassword);
          setNoteData(prev => ({ ...prev, encrypted: false, content: decryptedContent }));
          setEncryptionPassword('');
        } catch (error) {
          alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!');
          console.error(error);
        }
      } else {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è!');
      }
    }
  }, [noteData.encrypted, encryptionPassword, noteData.content]);

  const addLocation = useCallback(async () => {
    await getCurrentLocation();
  }, [getCurrentLocation]);

  useEffect(() => {
    if (location && !noteData.location) {
      setNoteData(prev => ({
        ...prev,
        location
      }));
    }
  }, [location, noteData.location]);

  const handleAttachmentChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files);
      const newAttachments: FileAttachment[] = files.map(file => ({
        id: URL.createObjectURL(file),
        name: file.name,
        type: file.type,
        size: file.size,
        url: URL.createObjectURL(file),
        thumbnail: file.type.startsWith('image/') ? URL.createObjectURL(file) : undefined
      }));
      setNoteData(prev => ({
        ...prev,
        attachments: [...prev.attachments, ...newAttachments]
      }));
    }
  }, []);

  const handleRemoveAttachment = useCallback((id: string) => {
    setNoteData(prev => ({
      ...prev,
      attachments: prev.attachments.filter(att => att.id !== id)
    }));
  }, []);

  const handleSaveNote = useCallback(async () => {
    if (!noteData.title.trim() && !noteData.content.trim()) {
      alert('–ó–∞–º–µ—Ç–∫–∞ –ø—É—Å—Ç–∞!');
      return;
    }

    try {
      let finalNoteData = { ...noteData };

      if (noteData.encrypted && encryptionPassword) {
        finalNoteData.content = await EncryptionService.encrypt(noteData.content, encryptionPassword);
      }

      finalNoteData.lastModified = new Date().toISOString();
      finalNoteData.version += 1;

      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∑–∞–º–µ—Ç–∫–∏:', finalNoteData);
      alert('–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º!');
      onNoteSaved();
      setNoteData({
        title: '',
        content: '',
        color: NOTE_COLORS[0],
        tags: [],
        priority: '–°—Ä–µ–¥–Ω–∏–π',
        attachments: [],
        collaborators: [],
        voiceNotes: [],
        encrypted: false,
        version: 1,
        lastModified: new Date().toISOString(),
        wordCount: 0,
        readingTime: 0,
        category: '–õ–∏—á–Ω–æ–µ'
      });
      setEncryptionPassword('');
      setSuggestedTags([]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏');
    }
  }, [noteData, encryptionPassword, onNoteSaved]);

  const addTag = useCallback(() => {
    const tagToAdd = newTag.trim();
    if (tagToAdd && !noteData.tags.includes(tagToAdd)) {
      setNoteData(prev => ({
        ...prev,
        tags: [...prev.tags, tagToAdd]
      }));
      setNewTag('');
    }
  }, [newTag, noteData.tags]);

  const removeTag = useCallback((tagToRemove: string) => {
    setNoteData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  }, []);

  const addSuggestedTag = useCallback((tag: string) => {
    if (!noteData.tags.includes(tag)) {
      setNoteData(prev => ({
        ...prev,
        tags: [...prev.tags, tag]
      }));
    }
    setSuggestedTags(prev => prev.filter(t => t !== tag));
  }, [noteData.tags]);

  return (
    <div className={`${styles.columnPanel} ${styles.noteEditorPanel}`}>
      <div className={styles.panelHeader}>
        <NoteIcon />
        <h2>–°–æ–∑–¥–∞—Ç—å –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É</h2>
        <div style={{ marginLeft: 'auto', display: 'flex', gap: '8px', alignItems: 'center' }}>
          {aiLoading && <div style={{ color: 'var(--accent-purple)' }}>ü§ñ –ê–Ω–∞–ª–∏–∑...</div>}
          {noteData.encrypted && <SecurityIcon title="–ó–∞–º–µ—Ç–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞" style={{ color: 'var(--accent-green)' }} />}
          {location && <LocationIcon title={`–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: ${location.address}`} style={{ color: 'var(--accent-blue)' }} />}
        </div>
      </div>

      <div className={styles.noteEditorContent}>
        <input
          type="text"
          placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏..."
          value={noteData.title}
          onChange={(e) => setNoteData(prev => ({ ...prev, title: e.target.value }))}
          className={styles.noteTitleInput}
        />
        <textarea
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É –∑–¥–µ—Å—å..."
          value={noteData.content}
          onChange={(e) => setNoteData(prev => ({ ...prev, content: e.target.value }))}
          className={styles.noteContentTextarea}
        />

        {noteData.aiSummary && (
          <div className={styles.aiSummary}>
            <AIIcon />
            <p>
              **AI-—Ä–µ–∑—é–º–µ:** {noteData.aiSummary}
              <span style={{ marginLeft: '10px', fontSize: '11px', color: 'var(--text-muted)' }}>
                ({noteData.wordCount} —Å–ª–æ–≤, {noteData.readingTime} –º–∏–Ω —á—Ç–µ–Ω–∏—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {noteData.mood})
              </span>
            </p>
          </div>
        )}

        <div className={styles.noteSettingsGrid}>
          <div className={styles.settingItem}>
            <label>–¶–≤–µ—Ç –∑–∞–º–µ—Ç–∫–∏:</label>
            <div className={styles.colorPalette}>
              {NOTE_COLORS.map(color => (
                <div
                  key={color}
                  className={`${styles.colorBox} ${noteData.color === color ? styles.selected : ''}`}
                  style={{ background: color }}
                  onClick={() => setNoteData(prev => ({ ...prev, color }))}
                />
              ))}
            </div>
          </div>

          <div className={styles.settingItem}>
            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
            <select
              value={noteData.priority}
              onChange={(e) => setNoteData(prev => ({ ...prev, priority: e.target.value as NoteData['priority'] }))}
              style={{ background: PRIORITY_COLORS[noteData.priority], color: noteData.priority === '–ù–∏–∑–∫–∏–π' || noteData.priority === '–°—Ä–µ–¥–Ω–∏–π' ? 'var(--text-primary)' : 'white' }}
            >
              {PRIORITY_OPTIONS.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          <div className={styles.settingItem}>
            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
            <select
              value={noteData.category}
              onChange={(e) => setNoteData(prev => ({ ...prev, category: e.target.value }))}
            >
              {CATEGORIES.map(cat => (
                <option key={cat} value={cat}>{cat}</option>
              ))}
            </select>
          </div>

          <div className={styles.settingItem}>
            <label>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</label>
            <input
              type="date"
              value={noteData.dueDate || ''}
              onChange={(e) => setNoteData(prev => ({ ...prev, dueDate: e.target.value }))}
            />
          </div>
        </div>

        <div className={styles.tagsSection}>
          <label>–¢–µ–≥–∏:</label>
          <div className={styles.tagsInputContainer}>
            <input
              type="text"
              value={newTag}
              onChange={(e) => setNewTag(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && addTag()}
              placeholder="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥..."
            />
            <button
              onClick={addTag}
              className={styles.actionButton}
            >
              <PlusIcon style={{ width: '16px', height: '16px' }} /> –î–æ–±–∞–≤–∏—Ç—å
            </button>
          </div>
          <div className={styles.currentTags}>
            {noteData.tags.map(tag => (
              <span key={tag} className={styles.tagPill}>
                {tag}
                <button onClick={() => removeTag(tag)}>√ó</button>
              </span>
            ))}
          </div>
          {suggestedTags.length > 0 && (
            <div className={styles.suggestedTags}>
              <label>AI –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:</label>
              <div>
                {suggestedTags.map(tag => (
                  <button
                    key={tag}
                    onClick={() => addSuggestedTag(tag)}
                  >
                    {tag}
                  </button>
                ))}
              </div>
            </div>
          )}
        </div>

        <div className={styles.attachmentsSection}>
          <label>–í–ª–æ–∂–µ–Ω–∏—è:</label>
          <input
            type="file"
            multiple
            onChange={handleAttachmentChange}
          />
          <div className={styles.attachmentList}>
            {noteData.attachments.map(attachment => (
              <div key={attachment.id} className={styles.attachmentItem}>
                {attachment.thumbnail ? (
                  <img src={attachment.thumbnail} alt="thumbnail" />
                ) : (
                  <AttachmentIcon />
                )}
                <span>{attachment.name}</span>
                <button onClick={() => handleRemoveAttachment(attachment.id)}>√ó</button>
              </div>
            ))}
          </div>
        </div>

        <div className={styles.voiceNotesSection}>
          <label>–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏:</label>
          <button
            onClick={handleVoiceRecording}
            className={`${styles.actionButton} ${isRecording ? styles.recording : ''}`}
          >
            <VoiceIcon />
            {isRecording ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' : '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'}
          </button>
          <div className={styles.voiceNoteList}>
            {noteData.voiceNotes.map(vn => (
              <div key={vn.id} className={styles.voiceNoteItem}>
                <button onClick={() => handlePlayVoiceNote(vn.url)}>
                  <svg viewBox="0 0 24 24" fill="currentColor" width="16" height="16">
                    <path d="M8 5v14l11-7z" />
                  </svg>
                </button>
                <div>
                  <span>–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ {vn.id.substring(vn.id.length - 4)}</span>
                  {vn.transcript && (
                    <p>
                      " {vn.transcript.length > 50 ? vn.transcript.substring(0, 50) + '...' : vn.transcript} "
                    </p>
                  )}
                  <div className={styles.waveform}>
                    {vn.waveform.map((amp, idx) => (
                      <div key={idx} style={{
                        height: `${Math.abs(amp) * 100}%`,
                        transform: `scaleY(${amp > 0 ? 1 : -1})`
                      }} />
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className={styles.collaboratorsSection}>
          <label>–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ã:</label>
          <input
            type="text"
            placeholder="–î–æ–±–∞–≤–∏—Ç—å email –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∞..."
            value={noteData.collaborators.join(', ')}
            disabled
          />
          <div className={styles.collaboratorAvatars}>
            {noteData.collaborators.length === 0 ? (
              <span>–ù–∏–∫—Ç–æ –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç</span>
            ) : (
              noteData.collaborators.map(collab => (
                <div key={collab} style={{
                  background: AVATAR_COLORS[collab as keyof typeof AVATAR_COLORS] || '#ccc',
                }} title={collab}>
                  {collab[0].toUpperCase()}
                </div>
              ))
            )}
            <button
              onClick={() => setNoteData(prev => ({ ...prev, collaborators: [...prev.collaborators, "–ê–Ω–Ω–∞", "–ü–µ—Ç—Ä"] }))}
              className={styles.actionButton}
            >
              –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∞ (–ü—Ä–∏–º–µ—Ä)
            </button>
          </div>
        </div>

        <div className={styles.encryptionSection}>
          <SecurityIcon style={{ color: noteData.encrypted ? 'var(--accent-green)' : 'var(--text-muted)' }} />
          <label htmlFor="encryption-toggle">–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É:</label>
          <input
            type="checkbox"
            id="encryption-toggle"
            checked={noteData.encrypted}
            onChange={toggleEncryption}
          />
          {noteData.encrypted && <span style={{ fontSize: '12px', color: 'var(--accent-green)' }}> (–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ)</span>}
        </div>

        <div className={styles.locationSection}>
          <LocationIcon style={{ color: noteData.location ? 'var(--accent-blue)' : 'var(--text-muted)' }} />
          <label>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</label>
          <button
            onClick={addLocation}
            disabled={locationLoading || !!noteData.location}
            className={styles.actionButton}
            style={{
              background: noteData.location ? 'var(--bg-tertiary)' : undefined,
              color: noteData.location ? 'var(--text-muted)' : undefined,
            }}
          >
            {locationLoading ? '–û–ø—Ä–µ–¥–µ–ª—è–µ–º...' : (noteData.location ? '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')}
          </button>
          {noteData.location && (
            <span>
              {noteData.location.address}
            </span>
          )}
        </div>

        <div className={styles.editorFooter}>
          <button
            onClick={() => {
              setNoteData({
                title: '',
                content: '',
                color: NOTE_COLORS[0],
                tags: [],
                priority: '–°—Ä–µ–¥–Ω–∏–π',
                attachments: [],
                collaborators: [],
                voiceNotes: [],
                encrypted: false,
                version: 1,
                lastModified: new Date().toISOString(),
                wordCount: 0,
                readingTime: 0,
                category: '–õ–∏—á–Ω–æ–µ'
              });
              setEncryptionPassword('');
              setSuggestedTags([]);
            }}
            className={styles.secondaryButton}
          >
            –û—á–∏—Å—Ç–∏—Ç—å
          </button>
          <button
            onClick={handleSaveNote}
            className={styles.primaryButton}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
          </button>
        </div>
      </div>
    </div>
  );
};

// üí¨ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–µ–º–æ-—á–∞—Ç–∞
const ChatPanel: React.FC = () => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState<string>('');
  const [isAIToggleOn, setIsAIToggleOn] = useState(false);
  const chatMessagesRef = useRef<HTMLDivElement>(null);

  const getRandomUser = useCallback(() => {
    const availableUsers = CHAT_USERS.filter(user => user !== "–í—ã");
    return availableUsers[Math.floor(Math.random() * availableUsers.length)];
  }, []);

  const getRandomMessageContent = useCallback(() => {
    return RANDOM_MESSAGES[Math.floor(Math.random() * RANDOM_MESSAGES.length)];
  }, []);

  const getRandomAIResponse = useCallback(() => {
    return AI_RESPONSES[Math.floor(Math.random() * AI_RESPONSES.length)];
  }, []);

  const generateRandomReaction = (): MessageReactions => {
    const reactions: MessageReactions = {
      thumbsup: 0,
      heart: 0,
      laugh: 0,
      fire: 0,
      mind_blown: 0,
      party: 0,
    };
    const reactionTypes = Object.keys(reactions) as Array<keyof MessageReactions>;
    const numReactions = Math.floor(Math.random() * 3);
    for (let i = 0; i < numReactions; i++) {
      const randomReactionType = reactionTypes[Math.floor(Math.random() * reactionTypes.length)];
      reactions[randomReactionType] += Math.floor(Math.random() * 3) + 1;
    }
    return reactions;
  };

  const addRandomMessage = useCallback(() => {
    const user = getRandomUser();
    const messageContent = getRandomMessageContent();
    setMessages(prev => [
      ...prev,
      {
        id: Date.now().toString(),
        user,
        message: messageContent,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        type: 'text',
        reactions: generateRandomReaction(),
        readBy: [],
      }
    ]);
  }, [getRandomUser, getRandomMessageContent]);

  useEffect(() => {
    const interval = setInterval(() => {
      addRandomMessage();
    }, 5000);
    return () => clearInterval(interval);
  }, [addRandomMessage]);

  useEffect(() => {
    if (chatMessagesRef.current) {
      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = useCallback(() => {
    if (!newMessage.trim()) return;

    const newMsg: ChatMessage = {
      id: Date.now().toString(),
      user: "–í—ã",
      message: newMessage.trim(),
      timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      type: 'text',
      reactions: { thumbsup: 0, heart: 0, laugh: 0, fire: 0, mind_blown: 0, party: 0 },
      readBy: [],
    };

    setMessages(prev => [...prev, newMsg]);
    setNewMessage('');

    if (isAIToggleOn) {
      setTimeout(() => {
        setMessages(prev => [
          ...prev,
          {
            id: (Date.now() + 1).toString(),
            user: "AI Assistant",
            message: getRandomAIResponse(),
            timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
            type: 'ai_response',
            reactions: generateRandomReaction(),
            isAI: true,
            readBy: [],
          }
        ]);
      }, 1000);
    }
  }, [newMessage, isAIToggleOn, getRandomAIResponse]);

  const handleReaction = useCallback((messageId: string, reactionType: keyof MessageReactions) => {
    setMessages(prevMessages =>
      prevMessages.map(msg =>
        msg.id === messageId
          ? {
              ...msg,
              reactions: {
                ...msg.reactions,
                [reactionType]: msg.reactions[reactionType] + 1
              }
            }
          : msg
      )
    );
  }, []);

  return (
    <div className={`${styles.columnPanel} ${styles.chatPanel}`}>
      <div className={styles.panelHeader}>
        <CollaborationIcon />
        <h2>–ß–∞—Ç –∫–æ–º–∞–Ω–¥—ã (–î–µ–º–æ)</h2>
      </div>
      <div className={styles.chatMessages} ref={chatMessagesRef}>
        {messages.map(msg => (
          <div key={msg.id} className={styles.chatMessage}>
            <div
              className={styles.chatAvatar}
              style={{ background: AVATAR_COLORS[msg.user as keyof typeof AVATAR_COLORS] || '#ccc' }}
              title={msg.user}
            >
              {msg.user[0].toUpperCase()}
            </div>
            <div className={styles.chatMessageContent}>
              <strong>{msg.user}</strong>
              <p>{msg.message}</p>
              <span className={styles.chatMessageTimestamp}>{msg.timestamp}</span>
              <div className={styles.messageReactions}>
                {Object.entries(msg.reactions).map(([reaction, count]) =>
                  count > 0 ? (
                    <span
                      key={reaction}
                      onClick={() => handleReaction(msg.id, reaction as keyof MessageReactions)}
                    >
                      {
                        reaction === 'thumbsup' ? 'üëç' :
                        reaction === 'heart' ? '‚ù§Ô∏è' :
                        reaction === 'laugh' ? 'üòÇ' :
                        reaction === 'fire' ? 'üî•' :
                        reaction === 'mind_blown' ? 'ü§Ø' :
                        reaction === 'party' ? 'üéâ' : ''
                      } {count}
                    </span>
                  ) : null
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
      <div className={styles.chatInputContainer}>
        <div className={styles.aiToggleContainer}>
          <span className={styles.aiToggleLabel}>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</span>
          <label className={styles.aiToggleSwitch}>
            <input
              type="checkbox"
              checked={isAIToggleOn}
              onChange={() => setIsAIToggleOn(prev => !prev)}
            />
            <span className={styles.aiToggleSlider}></span>
          </label>
        </div>
        <div className={styles.chatInputWrapper}>
          <input
            type="text"
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
          />
          <button onClick={handleSendMessage}>
            <SendIcon />
          </button>
        </div>
      </div>
    </div>
  );
};

// Main App Component
const CreateNote: React.FC = () => {
  const navigate = useNavigate();

  const generateRandomDashboardData = useCallback((): DashboardData => ({
    activityData: Array.from({ length: 7 }, () => Math.floor(Math.random() * 50)),
    newNotesToday: Math.floor(Math.random() * 10),
    avgNoteTime: Number((Math.random() * 5).toFixed(1)),
    totalUsers: Math.floor(Math.random() * 2000) + 1000,
    popularNote: ["–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç", "–ü–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞", "–ò–¥–µ–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞", "–õ–∏—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏"][Math.floor(Math.random() * 4)],
    syncStatus: ['working', 'syncing', 'offline'][Math.floor(Math.random() * 3)] as 'working' | 'error' | 'syncing' | 'offline',
    serverLoad: Number((Math.random() * 1).toFixed(2)),
    notifications: Math.floor(Math.random() * 10),
    aiInsights: [
      {
        type: 'productivity',
        title: '–£–ª—É—á—à–∏—Ç–µ —Ñ–æ–∫—É—Å',
        description: `–û—Ç–≤–ª–µ—á–µ–Ω–∏–π: ${Math.floor(Math.random() * 30)}% –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã.`,
        confidence: Number((Math.random() * 0.3 + 0.7).toFixed(2)),
        actionable: true
      },
      {
        type: 'pattern',
        title: '–í–µ—á–µ—Ä–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        description: `–ó–∞–º–µ—Ç–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ ${Math.floor(Math.random() * 6 + 18)}:00.`,
        confidence: Number((Math.random() * 0.2 + 0.8).toFixed(2)),
        actionable: false
      },
      {
        type: 'recommendation',
        title: '–ù–æ–≤—ã–µ —Ç–µ–≥–∏',
        description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–≥–∏: ' + ['–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ò–¥–µ–∏', '–†–∞–±–æ—Ç–∞'][Math.floor(Math.random() * 3)],
        confidence: Number((Math.random() * 0.3 + 0.6).toFixed(2)),
        actionable: true
      },
      {
        type: 'warning',
        title: '–°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        description: `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø–∞–ª–∞ –Ω–∞ ${Math.floor(Math.random() * 20)}%.`,
        confidence: Number((Math.random() * 0.4 + 0.5).toFixed(2)),
        actionable: true
      }
    ],
    productivityScore: Math.floor(Math.random() * 20 + 80),
    streakDays: Math.floor(Math.random() * 50),
    trendingTags: [
      { name: 'AI', trend: Math.floor(Math.random() * 20), usage: Math.floor(Math.random() * 150), aiRecommended: true },
      { name: '–ü—Ä–æ–µ–∫—Ç—ã', trend: Math.floor(Math.random() * 10), usage: Math.floor(Math.random() * 100), aiRecommended: false },
      { name: '–ò–¥–µ–∏', trend: Math.floor(Math.random() * 15), usage: Math.floor(Math.random() * 80), aiRecommended: true },
      { name: '–õ–∏—á–Ω–æ–µ', trend: Math.floor(Math.random() * 5) * -1, usage: Math.floor(Math.random() * 70), aiRecommended: false }
    ],
    realtimeCollaborators: Math.floor(Math.random() * 5),
    storageUsed: { used: Math.floor(Math.random() * 1000), total: 2048 },
    securityStatus: ['secure', 'warning', 'critical'][Math.floor(Math.random() * 3)] as 'secure' | 'warning' | 'critical',
    aiQuota: { used: Math.floor(Math.random() * 300), total: 500 }
  }), []);

  const [dashboardData, setDashboardData] = useState<DashboardData>(generateRandomDashboardData());

  useEffect(() => {
    const interval = setInterval(() => {
      setDashboardData(generateRandomDashboardData());
    }, 10000);
    return () => clearInterval(interval);
  }, [generateRandomDashboardData]);

  const handleNoteSaved = useCallback(() => {
    console.log("Note saved successfully!");
  }, []);

  return (
    <>
      <button className={styles.homeButton} onClick={() => navigate('/')} title="–ù–∞ –≥–ª–∞–≤–Ω—É—é">
        <HomeIcon />
      </button>
      <div className={styles.createNotePage}>
        <EnhancedDashboardPanel dashboardData={dashboardData} />
        <SuperNoteEditor onNoteSaved={handleNoteSaved} />
        <ChatPanel />
      </div>
    </>
  );
};

export default CreateNote;